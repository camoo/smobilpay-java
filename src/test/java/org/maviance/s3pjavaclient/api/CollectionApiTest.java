/*
 * Smobilpay S3P API STANDARD
 * Smobilpay Third Party STANDARD API FOR PAYMENT COLLECTIONS
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.maviance.s3pjavaclient.api;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;
import org.maviance.s3pjavaclient.ApiException;
import org.maviance.s3pjavaclient.model.Bill;
import org.maviance.s3pjavaclient.model.Cashin;
import org.maviance.s3pjavaclient.model.Cashout;
import org.maviance.s3pjavaclient.model.Collectionstd;
import org.maviance.s3pjavaclient.model.CollectionstdRequest;
import org.maviance.s3pjavaclient.model.Product;
import org.maviance.s3pjavaclient.model.QuoteRequest;
import org.maviance.s3pjavaclient.model.Quotestd;
import org.maviance.s3pjavaclient.model.Subscription;
import org.maviance.s3pjavaclient.model.Topup;

/**
 * API tests for CollectionApi
 */
@Ignore
public class CollectionApiTest {

	private final CollectionApi api = new CollectionApi();

	/**
	 * Get bill payment handler
	 *
	 * A request to this endpoint returns bill payment handler records for a service
	 * by a service number and retrieves its details if available. Bill payments
	 * come in 2 flavors – which are determined by the related service’s type: 1.
	 * **SEARCHABLE_BILL** – When calling the endpoint for searchable bills, the
	 * result set will contain a list of all open bills for the selected service
	 * number. Each bill has its own Payment Item Identifier. 2.
	 * **NON_SEARCHABLE_BILL** – When calling the endpoint for non-searchable bills,
	 * the result set will always contain a single bill item with a Payment Item ID
	 * to perform the collection for the provided service number.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void billGetTest() throws ApiException {
		String merchant = null;
		Integer serviceid = null;
		String serviceNumber = null;
		List<Bill> response = api.billGet(merchant, serviceid, serviceNumber);

		// TODO: test validations
	}

	/**
	 * Retrieve available cashin packages
	 *
	 * This service provides available cashin packages to be made to the system.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void cashinGetTest() throws ApiException {
		Integer serviceid = null;
		List<Cashin> response = api.cashinGet(serviceid);

		// TODO: test validations
	}

	/**
	 * Retrieves available cashout packages
	 *
	 * This service provides available cashout packages to be made to the system.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void cashoutGetTest() throws ApiException {
		Integer serviceid = null;
		List<Cashout> response = api.cashoutGet(serviceid);

		// TODO: test validations
	}

	/**
	 * Execute payment collection
	 *
	 * This endpoint executes a payment collection. Any collection will reduce the
	 * agent balance by service amount plus the service fee. Each collection must
	 * include a reference to corresponding quote and payment authorization token.
	 * Whether or not fields are mandatory depends on the service configuration
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void collectstdPostTest() throws ApiException {
		CollectionstdRequest body = null;
		Collectionstd response = api.collectstdPost(body);

		// TODO: test validations
	}

	/**
	 * Retrieve list of available products
	 *
	 * This service provides a list of all available products for all services.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void productGetTest() throws ApiException {
		Integer serviceid = null;
		List<Product> response = api.productGet(serviceid);

		// TODO: test validations
	}

	/**
	 * Request quote with price details about the payment
	 *
	 * Calling this web-service requests a quote from the system for the payment
	 * collection of the selected payment item and the specified payment amount in
	 * the system. The amount is to be chosen based on the services amountType, so
	 * can either be fixed or a custom entered value. The third parameter specifies
	 * the payment method that the customer has chosen in order to pay for the
	 * collection, as there may be additional charges depending on the selected
	 * method. A quote will only remain available for short time (a few minutes) and
	 * will expire. A quote will return the actual costs involved in collecting the
	 * payment. A quote always needs to be requested before making a
	 * collection.\&quot;
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void quotestdPostTest() throws ApiException {
		QuoteRequest body = null;
		Quotestd response = api.quotestdPost(body);

		// TODO: test validations
	}

	/**
	 * Get subscription payment handler
	 *
	 * A request to this endpoint looks up a subscription record for a service by
	 * service number and retrieves its details if available. When calling the
	 * endpoint the result set will contain a list of all available subscriptions
	 * registered under the provided service number. Each subscription has its own
	 * Payment Item Identifier.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void subscriptionGetTest() throws ApiException {
		String merchant = null;
		String serviceid = null;
		String serviceNumber = null;
		List<Subscription> response = api.subscriptionGet(merchant, serviceid, serviceNumber);

		// TODO: test validations
	}

	/**
	 * Retrieve available topup packages
	 *
	 * This service provides a list of all available topup packages. DEPRECTATED:
	 * Some providers will return a digital code for manual redeeming. This code
	 * will be provided in the response object of a successful collection. This
	 * functionality has been moved into the /voucher endpoint and will be removed
	 * in the next version of this API
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void topupGetTest() throws ApiException {
		Integer serviceid = null;
		List<Topup> response = api.topupGet(serviceid);

		// TODO: test validations
	}

	/**
	 * Verify service number
	 *
	 * For services that support verification (indicated by the
	 * \&quot;isVerifiable\&quot; flag) the service number can be provided to this
	 * endpoint. The system will verify wether or not the service number is valid
	 * with the selected service.
	 *
	 * @throws ApiException if the Api call fails
	 */
//	@Test
//	public void verifyGetTest() throws ApiException {
//		String merchant = null;
//		Integer serviceid = null;
//		String serviceNumber = null;
//		Boolean response = api.verifyGet(merchant, serviceid, serviceNumber);
//
//		// TODO: test validations
//	}

	/**
	 * Retrieve list of available vouchers to purchase
	 *
	 * This service provides a list of all available vouchers for all services. A
	 * purchase of a voucher will return a digital code for manual redeeming. This
	 * code will be provided in the response object of a successful collection.
	 *
	 * @throws ApiException if the Api call fails
	 */
//	@Test
//	public void voucherGetTest() throws ApiException {
//		Integer serviceid = null;
//		List<Product> response = api.voucherGet(serviceid);
//
//		// TODO: test validations
//	}
}
