/*
 * Smobilpay S3P API STANDARD
 * Smobilpay Third Party STANDARD API FOR PAYMENT COLLECTIONS
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.maviance.s3pjavaclient.api;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;
import org.maviance.s3pjavaclient.ApiException;
import org.maviance.s3pjavaclient.model.Account;
import org.maviance.s3pjavaclient.model.Merchant;
import org.maviance.s3pjavaclient.model.Service;

/**
 * API tests for MasterdataApi
 */
@Ignore
public class MasterdataApiTest {

	private final MasterdataApi api = new MasterdataApi();

	/**
	 * Retrieve account information and remaining account balance
	 *
	 * This endpoint returns the user’s account information – most notably the
	 * current balance of the user. Calling this service before and after **each**
	 * collection in order to retrieve the current limits and/or balance is **highly
	 * discouraged**. The recommended approach is as follows: 1. Only a successful
	 * payment collection transaction will affect the account balance. The
	 * corresponding endpoint will also return the current account balance after the
	 * collection in its result payload. 2. For unsuccessful payment transactions,
	 * the account balance will not be affected. The error message returns a verbose
	 * message as to why the transaction failed. There is no need to recheck the
	 * account after each error.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void accountGetTest() throws ApiException {
		Account response = api.accountGet();

		// TODO: test validations
	}

	/**
	 * Retrieve list of merchants supported by the system.
	 *
	 * Provides merchants supported by the system. Every service is assigned to a
	 * merchant.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void merchantGetTest() throws ApiException {
		List<Merchant> response = api.merchantGet();

		// TODO: test validations
	}

	/**
	 * Retrieve list of services supported by the system.
	 *
	 * This service endpoint provides information about the services supported by .
	 * Each service has its own set of required input parameters which need to be
	 * provided during the collection request - starting with the prefix “isReq”. It
	 * is recommended that the application UI is configured based on the response
	 * values provided here. The service response will also specify the type of the
	 * service and thus detail how the related payment items can be retrieved and
	 * collected.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void serviceGetTest() throws ApiException {
		List<Service> response = api.serviceGet();

		// TODO: test validations
	}

	/**
	 * Retrieve single service
	 *
	 * This service endpoint provides information about the selected service. Each
	 * service has its own set of required input parameters which need to be
	 * provided during the collection request - starting with the prefix “isReq”. It
	 * is recommended that the application UI is configured based on the response
	 * values provided here. The service response will also specify the type of the
	 * service and thus detail how the related payment items can be retrieved and
	 * collected.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void serviceIdGetTest() throws ApiException {
		Integer id = null;
		Service response = api.serviceIdGet(id);

		// TODO: test validations
	}

}
