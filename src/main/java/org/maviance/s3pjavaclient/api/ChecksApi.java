/*
 * Smobilpay S3P API STANDARD Smobilpay Third Party STANDARD API FOR PAYMENT COLLECTIONS OpenAPI
 * spec version: 3.0.0 NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git Do not edit the class manually.
 */

package org.maviance.s3pjavaclient.api;

import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.Call;
import org.maviance.s3pjavaclient.*;
import org.maviance.s3pjavaclient.model.Ping;

import java.lang.reflect.Type;
import java.util.ArrayList;

/**
 * This class is used to initiate a ping to the Smobilpay Server to check its
 * availability
 *
 * @see org.maviance.s3pjavaclient.api.BaseApi
 * @author Valdese Kamdem
 * @author Florian Lowe*/
public class ChecksApi extends BaseApi {

    public ChecksApi() {
        super();
    }

    public ChecksApi(ApiClient apiClient) {
        super(apiClient);
    }

    /**
     * Build call for pingGet
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public Call pingGetCall(final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getCall(progressListener, progressRequestListener, "/ping", new ArrayList<Pair>());
    }

    public Call pingGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // not needed because xAPiVersion is always set.
       /* if (this.xApiVersion == null) {
            throw new ApiException("Missing the required parameter 'xApiVersion' when calling pingGet(Async)");
        }*/

        return pingGetCall(progressListener, progressRequestListener);
    }

    /**
     * Run a ping to check on the availability of the api This endpoint simply checks the existence
     * and validity of the request on the server by returning a valid response object or an error
     * message. Its primary purpose is to provide a feedback on whether or not the API is available.
     * It also provides the current server time and timezone
     * @return Ping
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot deserialize the response
     *             body
     */
    public Ping pingGet() throws ApiException {
        ApiResponse<Ping> resp = pingGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Run a ping to check on the availability of the api This endpoint simply checks the existence
     * and validity of the request on the server by returning a valid response object or an error
     * message. Its primary purpose is to provide a feedback on whether or not the API is available.
     * It also provides the current server time and timezone
     * @return ApiResponse&lt;Ping&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot deserialize the response
     *             body
     */
    public ApiResponse<Ping> pingGetWithHttpInfo() throws ApiException {
        Call call = pingGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Ping>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run a ping to check on the availability of the api (asynchronously) This endpoint simply
     * checks the existence and validity of the request on the server by returning a valid response
     * object or an error message. Its primary purpose is to provide a feedback on whether or not
     * the API is available. It also provides the current server time and timezone
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request body object
     */
    public Call pingGetAsync(final ApiCallback<Ping> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        Call call = pingGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ping>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}